<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Teógenes Moura</title><description>Hi! I'm Teógenes Moura, Computer Engineering undergraduate from Brasília, Brazil. Nice to meet you :)</description><link>http://localhost:2368/</link><generator>Ghost 0.11</generator><lastBuildDate>Fri, 07 Jul 2017 02:21:41 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>GET request with Express JS</title><description>&lt;p&gt;Welcome to my first blog post! Today we'll learn how to run a simple GET request with Node JS and Express JS.&lt;/p&gt;

&lt;h6 id="requirements"&gt;Requirements&lt;/h6&gt;

&lt;p&gt;This tutorial was developed in a MacOS Sierra v.10.12.5, so if you're in a different operating system you'll probably need to check node's instructions&lt;/p&gt;</description><link>http://localhost:2368/2017/07/07/get-request-with-express-js-2/</link><guid isPermaLink="false">9babfa9c-382b-44d7-b757-ca3ffb1897fe</guid><category>code</category><category>javascript</category><category>node</category><category>expressjs</category><category>http</category><dc:creator>Teógenes Moura</dc:creator><pubDate>Fri, 07 Jul 2017 01:57:40 GMT</pubDate><content:encoded>&lt;p&gt;Welcome to my first blog post! Today we'll learn how to run a simple GET request with Node JS and Express JS.&lt;/p&gt;

&lt;h6 id="requirements"&gt;Requirements&lt;/h6&gt;

&lt;p&gt;This tutorial was developed in a MacOS Sierra v.10.12.5, so if you're in a different operating system you'll probably need to check node's instructions of installing for your specific operating system. Don't worry, they're all pretty straightforward&lt;/p&gt;

&lt;h6 id="installingourtools"&gt;Installing our tools&lt;/h6&gt;

&lt;p&gt;For this tutorial, there are only a few things we'll really need. First of them is Node JS, which is built with Javascript and allows your programs to receive web requests through an &lt;em&gt;http&lt;/em&gt; module. &lt;br&gt;
If you're in a Mac like me, you can go directly to Node's website and get the .pkg from there:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nodejs.org/en/download/"&gt;Download Node&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If, for some reason, you're not able to access Node's page there is still the possibility to get it with Homebrew, which is a package manager for Mac OS. For that end, I recommend &lt;a href="https://changelog.com/posts/install-node-js-with-homebrew-on-os-x"&gt;this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Test Node's installation by typing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node --version  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;into your terminal. If sucessful, it should return the version of Node your computer is running. At the time of this writing, I have &lt;em&gt;v6.10.3&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In order to responde to web requisitions (in our case, GET ones), we'll install ExpressJS, which is a web framework that runs on top of NodeJS. We could responde to simple HTTP requests with Node itself, but as soon as we need to render templates and do database queries, for example, it becomes a real burden to rely only on Node's syntax.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g express --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this command, we're asking NPM (Node Package Manager) to install globally (&lt;em&gt;-g&lt;/em&gt;)the module Express and save it to our package.json file(&lt;em&gt;--save&lt;/em&gt;). The advantage of installing it globally is that you'll be able to run express from the command line itself, which might be helpful in some cases such as &lt;/p&gt;

&lt;p&gt;After that, open up a new file in your favourite editor (I recommend Sublime Text) and type the following lines of code:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;let express = require('express');  
let app = express();  
let port = process.env.PORT || 3000;  
app.get('/', (req,res) =&amp;gt; () {  
    res.send("request received!");
});

app.listen(port);  
console.log("the app is listening on port + " port);  
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>Welcome to Ghost</title><description>&lt;p&gt;You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at &lt;code&gt;&amp;lt;your blog URL&amp;gt;/ghost/&lt;/code&gt;. When you arrive, you can select this post from a list&lt;/p&gt;</description><link>http://localhost:2368/2017/07/07/welcome-to-ghost/</link><guid isPermaLink="false">c87bf2ba-c2ac-4920-bf12-3bd73ba9ba48</guid><category>Getting Started</category><dc:creator>Teógenes Moura</dc:creator><pubDate>Fri, 07 Jul 2017 01:35:33 GMT</pubDate><content:encoded>&lt;p&gt;You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at &lt;code&gt;&amp;lt;your blog URL&amp;gt;/ghost/&lt;/code&gt;. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!&lt;/p&gt;

&lt;h2 id="gettingstarted"&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Ghost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!&lt;/p&gt;

&lt;p&gt;Writing in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use &lt;em&gt;shortcuts&lt;/em&gt; to &lt;strong&gt;style&lt;/strong&gt; your content. For example, a list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Item number one&lt;/li&gt;
&lt;li&gt;Item number two
&lt;ul&gt;&lt;li&gt;A nested item&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;A final item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;or with numbers!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Remember to buy some milk  &lt;/li&gt;
&lt;li&gt;Drink the milk  &lt;/li&gt;
&lt;li&gt;Tweet that I remembered to buy the milk, and drank it&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="links"&gt;Links&lt;/h3&gt;

&lt;p&gt;Want to link to a source? No problem. If you paste in a URL, like &lt;a href="http://ghost.org"&gt;http://ghost.org&lt;/a&gt; - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to &lt;a href="http://ghost.org"&gt;the Ghost website&lt;/a&gt;. Neat.&lt;/p&gt;

&lt;h3 id="whataboutimages"&gt;What about Images?&lt;/h3&gt;

&lt;p&gt;Images work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ghost.org/images/ghost.png" alt="The Ghost Logo"&gt;&lt;/p&gt;

&lt;p&gt;Not sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:&lt;/p&gt;

&lt;h3 id="quoting"&gt;Quoting&lt;/h3&gt;

&lt;p&gt;Sometimes a link isn't enough, you want to quote someone on what they've said. Perhaps you've started using a new blogging platform and feel the sudden urge to share their slogan? A quote might be just the way to do it!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ghost - Just a blogging platform&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="workingwithcode"&gt;Working with Code&lt;/h3&gt;

&lt;p&gt;Got a streak of geek? We've got you covered there, too. You can write inline &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.awesome-thing {
    display: block;
    width: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="readyforabreak"&gt;Ready for a Break?&lt;/h3&gt;

&lt;p&gt;Throw 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id="advancedusage"&gt;Advanced Usage&lt;/h3&gt;

&lt;p&gt;There's one fantastic secret about Markdown. If you want, you can write plain old HTML and it'll still work! Very flexible.&lt;/p&gt;

&lt;p&gt;&lt;input type="text" placeholder="I'm an input field!"&gt;&lt;/p&gt;

&lt;p&gt;That should be enough to get you started. Have fun - and let us know what you think :)&lt;/p&gt;</content:encoded></item></channel></rss>